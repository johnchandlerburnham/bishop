// Yatima, a dependently typed programming language

testDef (A: Type): Type {
  A
}

testLet : Type {
  let mut x: Type = Type;
  Type
}

testGhost (A, x:A): A {
  x
}

selfRef : Type {
  selfRef
}

mkBool (B, t:B, f:B): Type {
  @self
  (ght P: B -> Type, t: P t, f: P f) -> P self
}

testPrim : I64 {
  (#iadd 2 2)
}

testRed : I64 {
  ((x: I64) => x) 1
}
